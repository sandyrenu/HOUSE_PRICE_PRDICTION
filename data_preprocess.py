# -*- coding: utf-8 -*-
"""DATA_PREPROCESS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DDKq5tzuYIR2oEvQI8SD49BAZ1_lyvJH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns



from google.colab import drive
drive.mount('/content/drive')

pd.pandas.set_option('display.max_columns',None)
data=pd.read_csv('/content/drive/My Drive/train.csv')
print(data.shape)
data.head

features_with_na=[features for features in data.columns if data[features].isnull().sum()>1]
print(features_with_na)
for feature in features_with_na:
    print(feature, np.round(data[feature].isnull().mean(), 4),  ' % missing values')

for feature in features_with_na:
    d = data.copy()
    
    # let's make a variable that indicates 1 if the observation was missing or zero otherwise
    data[feature] = np.where(d[feature].isnull(), 1, 0)
    
    # let's calculate the mean SalePrice where the information is missing or present
    data.groupby(feature)['SalePrice'].median().plot.bar()
    plt.title(feature)
    plt.show()

print("Id of Houses {}".format(len(data.Id)))

numerical_features = [feature for feature in data.columns if data[feature].dtypes != 'O']
print('Number of numerical variables: ', len(numerical_features))


data[numerical_features].head()

year_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]

year_feature

for feature in year_feature:
    print(feature, data[feature].unique())

data.groupby('YrSold')['SalePrice'].median().plot()
plt.xlabel('Year Sold')
plt.ylabel('Median House Price')
plt.title("House Price vs YearSold")

print(year_feature)

for feature in year_feature:
    if feature!='YrSold':
        d=data.copy()
        ## We will capture the difference between year variable and year the house was sold for
        d[feature]=d['YrSold']-d[feature]

        plt.scatter(d[feature],d['SalePrice'])
        plt.xlabel(feature)
        plt.ylabel('SalePrice')
        plt.show()

discrete_feature=[feature for feature in numerical_features if len(data[feature].unique())<25 and feature not in year_feature+['Id']]
print("Discrete Variables Count: {}".format(len(discrete_feature)))
data[discrete_feature].head()

for feature in discrete_feature:
    d=data.copy()
    d.groupby(feature)['SalePrice'].median().plot.bar()
    plt.xlabel(feature)
    plt.ylabel('SalePrice')
    plt.title(feature)
    plt.show()

continuous_feature=[feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]
print("Continuous feature Count {}".format(len(continuous_feature)))

for feature in continuous_feature:
    d=data.copy()
    d[feature].hist(bins=25)
    plt.xlabel(feature)
    plt.ylabel("Count")
    plt.title(feature)
    plt.show()

for feature in continuous_feature:
    d=data.copy()
    if 0 in d[feature].unique():
        pass
    else:
        data[feature]=np.log(d[feature])
        data['SalePrice']=np.log(d['SalePrice'])
        plt.scatter(d[feature],d['SalePrice'])
        plt.xlabel(feature)
        plt.ylabel('SalesPrice')
        plt.title(feature)
        plt.show()

for feature in continuous_feature:
    d=data.copy()
    if 0 in d[feature].unique():
        pass
    else:
        d[feature]=np.log(d[feature])
        d.boxplot(column=feature)
        plt.ylabel(feature)
        plt.title(feature)
        plt.show()



categorical_features=[feature for feature in data.columns if data[feature].dtypes=='O']
categorical_features

data[categorical_features].head()

for feature in categorical_features:
    print('The feature is {} and number of categories are {}'.format(feature,len(data[feature].unique())))

for feature in categorical_features:
    d=data.copy()
    d.groupby(feature)['SalePrice'].median().plot.bar()
    plt.xlabel(feature)
    plt.ylabel('SalePrice')
    plt.title(feature)
    plt.show()

